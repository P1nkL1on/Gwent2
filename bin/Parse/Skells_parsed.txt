// < > GOLD
// < > UNITS
public static Unit CerysanCraite
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.gold, "Cerys an Craite");
		self.setUnitAttributes(6, Tag.clanancraite, Tag.officer);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "When 4 units are Resurrected while this unit is in the graveyard, Resurrect it on a random row.");
		
		return self;
	}
}
public static Unit CerysFearless
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.gold, "Cerys: Fearless");
		self.setUnitAttributes(6, Tag.clanancraite, Tag.officer);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Resurrect the next unit you Discard.");
		
		return self;
	}
}
public static Unit Olaf
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.gold, "Olaf");
		self.setUnitAttributes(20, Tag.beast, Tag.cursed);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Deal 10 damage to self. Reduce the damage inflicted by 2 for each Beast you played this match.");
		
		return self;
	}
}
public static Unit Kambi
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.gold, "Kambi");
		self.setUnitAttributes(1, );
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Spying.");
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Deathwish: Spawn Hemdall on a random row on this unit's side.");
		
		return self;
	}
}
public static Unit Hemdall
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.gold, "Hemdall");
		self.setUnitAttributes(20, Tag.doomed);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Destroy all other units and clear all Boons and Hazards.");
		
		return self;
	}
}
public static Unit HjalmaranCraite
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.gold, "Hjalmar an Craite");
		self.setUnitAttributes(14, Tag.clanancraite, Tag.officer);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Spawn the Lord of Undvik on the opposite row.");
		
		return self;
	}
}
// < > SILVER
public static Unit BlueboyLugos
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.silver, "Blueboy Lugos");
		self.setUnitAttributes(9, Tag.clandrummond, Tag.soldier);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Spawn a Spectral Whale on an enemy row.");
		
		return self;
	}
}
public static Unit DonaranHindar
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.silver, "Donar an Hindar");
		self.setUnitAttributes(9, Tag.clanheymaey, Tag.officer);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Toggle a unit's Lock status, then move a Bronze unit from your opponent's graveyard to yours.");
		
		return self;
	}
}
public static Unit HaraldHoundsnout
{
	get
	{
		Unit self = new Unit();
		self.setAttributes(Clan.nilfgaard, Rarity.silver, "Harald Houndsnout");
		self.setUnitAttributes(6, Tag.cursed, Tag.clantordarroch);
		
		// Do not forget to check and RECHECK correctence of current ability,
		// its triggering condition and signature of delegate!
		self.setOnDeploy ((s, f) => 
		{}, "Spawn Wilfred to the left of this unit, Wilhelm to the right, and Wilmar on the opposite row.");
		
		return self;
	}
}
